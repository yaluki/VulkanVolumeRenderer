#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
layout (binding = 0, rgba8) uniform writeonly image2D resultImage;

#define MAXLEN 1000.0
#define LAYER_THRESHOLD 100
#define COLOR_MASK 255
#define MAX_LAYERS 10 // allows for approx. 8.5 GB sized octree


struct OctreeData {
	vec3 pos;
	float voxelFreq;
	int numVoxelsSide;
};

struct Camera {
	vec3 pos;   
	vec3 lookat;
	float fov; 
};

layout (binding = 1) uniform UBO {
	vec3 lightPos;
	float aspectRatio;
	mat4 viewMat;
	OctreeData octreeData;
	Camera camera;
} ubo;

struct Node {
	uint color;
	uint firstChild;
};

layout (binding = 2, std430) buffer Nodes {
	Node octree[ ];
};

// Datastructure ====================================================

// childIdx => index of the child of this parent (valid: 0-7)
vec3 getChildPosition(in vec3 parentPos, in float radius, in uint childIdx) {
	switch(childIdx) {
		case 0:
			return vec3(parentPos.x-radius, parentPos.y-radius, parentPos.z-radius);
		break;
		case 1:
			return vec3(parentPos.x+radius, parentPos.y-radius, parentPos.z-radius);
		break;
		case 2:
			return vec3(parentPos.x-radius, parentPos.y+radius, parentPos.z-radius);
		break;
		case 3:
			return vec3(parentPos.x+radius, parentPos.y+radius, parentPos.z-radius);
		break;
		case 4:
			return vec3(parentPos.x-radius, parentPos.y-radius, parentPos.z+radius);
		break;
		case 5:
			return vec3(parentPos.x+radius, parentPos.y-radius, parentPos.z+radius);
		break;
		case 6:
			return vec3(parentPos.x-radius, parentPos.y+radius, parentPos.z+radius);
		break;
		case 7:
			return vec3(parentPos.x+radius, parentPos.y+radius, parentPos.z+radius);
		break;
	}
}

vec3 getNodePositionFromRoot(in vec3 parentPos, inout float radius, in uint voxelPath[MAX_LAYERS], in int currentLayer) {
	for (int i=1; i<=currentLayer; i++) {
		radius /= 2.0;
		uint internalIdx = voxelPath[i] - octree[voxelPath[i-1]].firstChild;
		parentPos = getChildPosition(parentPos, radius, internalIdx);
	}
	return parentPos;
}

uvec4 intToVec4(uint number) {
	uvec4 uvector;
	for (int i = 0; i < 4; i++) {
		uvector[3 - i] = (number >> 8 * i) & COLOR_MASK;
	}
	return uvector;
}

uint vec4ToInt(uvec4 uvector) {
	return (uvector.r << 24) | (uvector.g << 16) | (uvector.b << 8) | (uvector.a);
}

// Voxel ===========================================================

float voxelIntersect(in vec3 rayO, in vec3 rayDir, in vec3 voxelPos, in float radius) {
	if(dot(voxelPos - rayO, rayDir) < 0) {
		return -1; // behind camera
	}

	float len = length(cross(rayDir, voxelPos-rayO));
	
	if (len <= radius) {
		return length(voxelPos-rayO);
	}
	return -1; // no intersection
}

float boxIntersect(in vec3 rayO, in vec3 rayDir, in vec3 voxelPos, in float radius) {
	if(dot(voxelPos - rayO, rayDir) < 0) {
		return -1; // behind camera
	}

	float tx1 = (voxelPos.x + radius - rayO.x)/rayDir.x;
    float tx2 = (voxelPos.x - radius - rayO.x)/rayDir.x;
 
    float tmin = min(tx1, tx2);
    float tmax = max(tx1, tx2);
 
	float ty1 = (voxelPos.y + radius - rayO.y)/rayDir.y;
    float ty2 = (voxelPos.y - radius - rayO.y)/rayDir.y;
 
    tmin = max(tmin, min(ty1, ty2));
    tmax = min(tmax, max(ty1, ty2));

	float tz1 = (voxelPos.z + radius - rayO.z)/rayDir.z;
    float tz2 = (voxelPos.z - radius - rayO.z)/rayDir.z;
 
    tmin = max(tmin, min(tz1, tz2));
    tmax = min(tmax, max(tz1, tz2));

	if (tmax >= tmin) {
		return tmin;
	} else {
		return -1;
	}
}

uvec4 renderChildrenRespectLast(inout uint currentNodeIdx, inout vec3 currentNodePos, in uint firstChild, in float radius, in vec3 rayO, in vec3 rayDir, in uint lastIdx, out float bestDist) {
	uvec4 color = uvec4(0);
	bestDist = MAXLEN;
	uint bestChildIdx = currentNodeIdx;
	vec3 bestChildPos = currentNodePos;

	// calculate distance to last best node
	int internalIdx = int(lastIdx-firstChild);
	float lastBestDist = -1;
	if (internalIdx >= 0 && internalIdx < 8) {
		// correct layer reached
		vec3 childPos = getChildPosition(currentNodePos, radius, internalIdx);
		lastBestDist = boxIntersect(rayO, rayDir, childPos, radius);
	}
	for (uint i=0; i<8; i++) {
		if (intToVec4(octree[firstChild+i].color).a > 0.0) {
			vec3 childPos = getChildPosition(currentNodePos, radius, i);
			float dist = boxIntersect(rayO, rayDir, childPos, radius);
			
			if (dist != -1.0 && bestDist > dist && lastBestDist < dist) {
				bestDist = dist;
				bestChildPos = childPos;
				bestChildIdx = firstChild+i;
				color = intToVec4(octree[firstChild+i].color);
			}
		}
	}

	currentNodeIdx = bestChildIdx;
	currentNodePos = bestChildPos;
	return color;
}

vec4 renderSceneRespectLast(in vec3 rayO, in vec3 rayDir, inout uint voxelPath[MAX_LAYERS], inout uint lastIdx, inout int currLayerExchange) {
	uvec4 color = uvec4(0);
	float t = MAXLEN;

	float radius = ubo.octreeData.numVoxelsSide*ubo.octreeData.voxelFreq/2;

	int currentLayer = currLayerExchange; // copy for performance reasons
	uint currentNodeIdx = voxelPath[currentLayer];
	float layerThreshold = LAYER_THRESHOLD;
	float currentRadius = radius;
	vec3 currentNodePos = getNodePositionFromRoot(ubo.octreeData.pos, currentRadius, voxelPath, currentLayer);

	//if (boxIntersect(rayO, rayDir, currentNodePos, currentRadius) != -1) {
		do {
			uint parentIdx = currentNodeIdx;
			currentRadius /= 2.0;
			color = renderChildrenRespectLast(currentNodeIdx, currentNodePos, octree[currentNodeIdx].firstChild, currentRadius, rayO, rayDir, voxelPath[currentLayer+1], t);
			
			if (currentNodeIdx == parentIdx) {
				// all intersected nodes in this layer are rendered already, search for unrendered nodes one layer further up
				color = uvec4(0);
				break;
			}
			voxelPath[++currentLayer] = currentNodeIdx;
			layerThreshold /= 2.0;
		} while (t < layerThreshold && octree[currentNodeIdx].firstChild != 0);

		currentLayer--;
		currLayerExchange = currentLayer;
		lastIdx = currentNodeIdx;
	//}

	return color/255.0;
}

void main(void) {
	ivec2 dim = imageSize(resultImage);
	vec2 uv = vec2(gl_GlobalInvocationID.xy) / dim; // maps the screen in [0:1]

	vec3 rayO = ubo.camera.pos;

	vec3 right = normalize(vec3(ubo.viewMat[0].x, ubo.viewMat[1].x, ubo.viewMat[2].x));
	vec3 up = normalize(vec3(ubo.viewMat[0].y, ubo.viewMat[1].y, ubo.viewMat[2].y));
	vec3 forward = normalize(vec3(ubo.viewMat[0].z, ubo.viewMat[1].z, ubo.viewMat[2].z));
	vec2 imPos = -1.0 + 2.0 * uv;
	vec3 rayDir = normalize(3.0*forward - imPos.x*ubo.aspectRatio*right + imPos.y*up);

	// ray marching
	vec4 finalColor = vec4(0);
	float radius = ubo.octreeData.numVoxelsSide*ubo.octreeData.voxelFreq/2;
	if (boxIntersect(rayO, rayDir, ubo.octreeData.pos, radius) != -1) {
		uint voxelPath[MAX_LAYERS] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
		int currLayerExchange = 0;
		uint id = 0;
		do {
			vec4 newColor = renderSceneRespectLast(rayO, rayDir, voxelPath, id, currLayerExchange);
			if (finalColor.a+newColor.a > 1.0) {newColor.a=1.0-finalColor.a;}
			finalColor = vec4(finalColor.rgb*finalColor.a + newColor.rgb*newColor.a, finalColor.a+newColor.a);
		} while (id != 0 && finalColor.a < 1.0);
	}
	imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), finalColor);
}